---
import { getCollection } from 'astro:content';
import { Icon } from 'astro-icon';
import NavBar from '../components/NavBar.astro';
import Sidebar from '../components/Sidebar.astro';
import TableOfContent from '../components/TableOfContent.astro';
import NavigationContent from '../components/NavigationContent.astro';
import { CONTENT_SLUGS, GITHUB_EDIT_URL } from '../consts';

import '../styles/global.css';
import '../styles/code.css';

export interface Props {
  frontmatter: {
    title: string;
  };
  file: string;
  slug: string;
  headings: {
    slug: string;
    text: string;
    depth: number;
  }[];
}

const { frontmatter, headings, file, slug: currentSlug } = Astro.props;

const classroomEntries = await getCollection('classnotes');

const classNoteTitles: Record<string, string> = classroomEntries.reduce(
  (acc, { data: { title }, slug }) => ({
    ...acc,
    [slug]: title,
  }),
  {}
);

const classNoteIndex = CONTENT_SLUGS.findIndex((slug) => slug === currentSlug);

const previousClassNote = CONTENT_SLUGS[classNoteIndex - 1];

const nextClassNote = CONTENT_SLUGS[classNoteIndex + 1];

const githubEditUrl = `${GITHUB_EDIT_URL}/src${file.split('/src').pop()}`;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/lm/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <title>{frontmatter?.title ?? 'LM'}</title>
  </head>
  <body class="bg-gray-100 dark:bg-slate-800 dark:text-white">
    <NavBar />
    <div
      class="relative z-0 flex max-sm:flex-col justify-between items-stretch min-h-screen"
    >
      <Sidebar />

      <article
        class="mx-auto lg:max-xl:ml-64 py-8 px-4 md:px-6 max-xl:max-w-none w-full prose 2xl:prose-xl dark:prose-invert overflow-hidden"
      >
        <slot />

        <p class="mt-16">
          <a href={githubEditUrl} target="_blank">
            <Icon name="ic:baseline-mode-edit" size={20} class="inline" />
            <span>Editar esta p√°gina</span>
          </a>
        </p>

        <NavigationContent
          hasNavigation={CONTENT_SLUGS.includes(currentSlug)}
          previousClassNoteLink={previousClassNote}
          nextClassNoteLink={nextClassNote}
          previousClassNoteTitle={classNoteTitles[previousClassNote]}
          nextClassNoteTitle={classNoteTitles[nextClassNote]}
        />
      </article>

      <TableOfContent headings={headings} />
    </div>
  </body>
</html>

<style is:global>
  /* rehype-autolink-headings */
  article :is(h2, h3, h4, h5, h6) {
    @apply flex items-center;
  }

  article :is(h2, h3, h4, h5, h6):hover > a {
    @apply block;
  }

  article :is(h1, h2, h3, h4, h5, h6) > a {
    @apply ml-1 hidden;
  }

  article :is(h2, h3, h4, h5, h6) > a {
    @apply max-sm:block;
  }

  article .heading-link svg {
    @apply m-0 h-4 w-4;
  }

  /* Copy to clipboard */
  [data-rehype-pretty-code-fragment] {
    @apply relative;
  }

  [data-rehype-pretty-code-fragment] pre button {
    @apply hidden;
  }

  [data-rehype-pretty-code-fragment]
    pre:not([data-language='txt']):not([data-language='plaintext'])
    button.copy-button-block,
  [data-rehype-pretty-code-fragment]:hover
    pre:not([data-language='txt']):not([data-language='plaintext'])
    button {
    @apply block bg-gray-400 text-white dark:text-gray-800 absolute top-2 right-2 rounded p-1;
  }

  [data-rehype-pretty-code-fragment]
    pre:not([data-language='txt']):not([data-language='plaintext'])
    button:hover {
    @apply bg-gray-700 dark:bg-gray-100 cursor-pointer;
  }
</style>

<script is:inline>
  // Copy to clipboard
  // lucide:copy
  const copyButton =
    '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/></g></svg>';

  // material-symbols:check-small
  const copyButtonCheck =
    '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"><path fill="currentColor" d="m10 16.4l-4-4L7.4 11l2.6 2.6L16.6 7L18 8.4l-8 8Z"/></svg>';

  // use a class selector if available
  let blocks = document.querySelectorAll('pre');

  blocks.forEach((block) => {
    // only add button if browser supports Clipboard API
    if (navigator.clipboard) {
      let button = document.createElement('button');

      button.innerHTML = copyButton;
      block.appendChild(button);

      button.addEventListener('click', async () => {
        button.classList.add('copy-button-block');
        await copyCode(block, button);
      });
    }
  });

  async function copyCode(block, button) {
    let code = block.querySelector('code');
    let text = code.innerText;

    await navigator.clipboard.writeText(text);

    // visual feedback that task is completed
    button.innerHTML = copyButtonCheck;

    setTimeout(() => {
      button.innerHTML = copyButton;
      button.classList.remove('copy-button-block');
    }, 1000);
  }
</script>
