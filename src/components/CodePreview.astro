---
import { toHast } from 'mdast-util-to-hast';
import { toHtml } from 'hast-util-to-html';
import { remark } from 'remark';
import rehypePrettyCode, { Options } from 'rehype-pretty-code';
import { existsFile, readFile } from '../helpers/files';
import { prettyCodeOptions } from '../../plugins/rehype-pretty-code-config';

export interface Props {
  src?: string;
  content?: string;
  hideTitle?: boolean;
  title?: string;
  onlyBody?: boolean;
  lang?: string;
  showLineNumbers?: boolean;
  highlightLines?: string;
}

export const getHTML = async (code: string, settings: Partial<Options>) => {
  const hAST = toHast(remark().parse(code), { allowDangerousHtml: true });
  await rehypePrettyCode(settings)(hAST);
  return toHtml(hAST, { allowDangerousHtml: true });
};

const {
  src,
  content,
  onlyBody,
  lang,
  showLineNumbers = true,
  title,
  hideTitle,
  highlightLines,
} = Astro.props;

let slotContent = await Astro.slots.render('default');

if (slotContent) {
  const paragraphContentPattern =
    /^[\s\S]*<p[^\>]*>\s*([\s\S]*)\s*<\/p>[\s\S]*$/gim;

  slotContent = paragraphContentPattern.exec(slotContent)?.[1] ?? slotContent;
}

let code = content ?? slotContent;

let extension = lang ?? 'plaintext';

if (src && existsFile(src)) {
  code = readFile(src);

  extension = src?.split('.').pop() ?? 'plaintext';
}

if (onlyBody && code?.includes('<body')) {
  const bodyContentPattern =
    /^[\s\S]*<body[^\>]*>\n([\s\S]*)\n\s*<\/body>[\s\S]*$/gim;

  const body = bodyContentPattern.exec(code)?.[1] ?? code;

  const indentationPattern = /^(\s*)</gim;

  const firstIndentation = indentationPattern.exec(body)?.[1] ?? '';

  code = body?.replace(new RegExp(`^${firstIndentation}`, 'gim'), '') ?? code;
}

const metas = [];

if (!hideTitle && (src || title || extension))
  metas.push(`title="${src || title || extension}"`);

if (showLineNumbers) metas.push('showLineNumbers');

if (!!highlightLines) metas.push(`{${highlightLines}}`);

const metastring = metas.join(' ');

const markdown = `\`\`\`${extension} ${metastring}\n${code}\n\`\`\``;

const html = await getHTML(markdown, prettyCodeOptions);
---

<Fragment set:html={html} />
